---

# Postgres user in Docker appears as user 999 outside
- name: Create LDSM DB storage directory
  file: state=directory path={{ ldsm_db_data_dir }} mode=0700 owner={{ ldsm_db_docker_user }} group={{ ldsm_db_docker_user }}

- name: Wait for Marathon
  include: ../../marathon-app/tasks/wait-for-marathon.yml
  vars:
    uri: "{{ internal_marathon_url }}"
  tags:
    - launch

- name: Remove old LDSM DB using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ ldsm_db_marathon_id }}"
    state: "absent"
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  tags:
    - launch

- name: Launch LDSM DB using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ ldsm_db_marathon_id }}"
    state: "present"
    docker_image: "postgres:{{ postgres_version }}"
    docker_force_pull_image: true
    docker_network: BRIDGE
    docker_port_mappings:
      - hostPort: '{{ ldsm_db_port }}'
        containerPort: 5432
        name: 'postgres'
        protocol: 'tcp'
    container_volumes:
      - containerPath: "/var/lib/postgresql/data"
        hostPath: "{{ ldsm_db_data_dir }}"
        mode: RW
    env:
      POSTGRES_USER: "{{ ldsm_db_admin_user }}"
      POSTGRES_PASSWORD: "{{ ldsm_db_admin_password }}"
    labels:
      MARATHON_SINGLE_INSTANCE_APP: "true"
      DATABASES: "{{ ldsm_db_databases }}"
    instances: 1
    cpus: '{{ ldsm_db_cpus }}'
    mem: '{{ ldsm_db_mem }}'
    ports: []
    require_ports: true
    constraints: [["hostname", "CLUSTER", "{{ ldsm_db_marathon_host }}"]]
    dependencies: []
    executor: ""
    wait_timeout: 600
    health_checks:
      - protocol: COMMAND
        command:
          value: "/usr/lib/postgresql/9.5/bin/pg_isready"
        gracePeriodSeconds: 300
        intervalSeconds: 20
        timeoutSeconds: 10
        maxConsecutiveFailures: 5
    upgrade_strategy_minimum_health_capacity: 0.0
    upgrade_strategy_maximum_over_capacity: 0.0
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  tags:
    - launch

- name: Install Python psycopg2 module for Postgres (required by postgresql_db task), pip and curl
  apt: name={{ item }} state=present
  with_items:
    - python-psycopg2
    - python-pip
    - curl
  when: ansible_os_family == 'Debian'
  delegate_to: "{{ groups['control'][0] }}"
  become: True

# See https://github.com/anarcher/ansible-docker-registry/issues/1
- name: Make sure pip upgraded
  command: easy_install -U pip
  when: ansible_os_family == 'Debian'
  delegate_to: "{{ groups['control'][0] }}"
  become: True

- name: Install Python module for Docker (required by docker_container task)
  pip: name=docker-py state=present
  delegate_to: "{{ groups['control'][0] }}"

# run this task on the database host
- name: Wait for the database to be up and running
  wait_for: >
    port="{{ ldsm_db_port }}"
    delay=2

- name: Create a new database with name "ldsm"
  postgresql_db:
    name: "{{ ldsm_db_name }}"
    port: "{{ ldsm_db_port }}"
    login_host: "{{ ldsm_db_host }}"
    login_user: "{{ ldsm_db_admin_user }}"
    login_password: "{{ ldsm_db_admin_password }}"
    state: present
  delegate_to: "{{ groups['control'][0] }}"

- name: Create ldsm user
  postgresql_user:
    login_host: "{{ ldsm_db_host }}"
    login_user: "{{ ldsm_db_admin_user }}"
    login_password: "{{ ldsm_db_admin_password }}"
    db: "{{ ldsm_db_name }}"
    port: "{{ ldsm_db_port }}"
    name: "{{ ldsm_db_user }}"
    password: "{{ ldsm_db_password }}"
    role_attr_flags: "SUPERUSER"
  delegate_to: "{{ groups['control'][0] }}"

- name: Create setup dir
  file:
    state: directory
    path: "{{ldsm_db_setup_dir}}"
  delegate_to: "{{ groups['control'][0] }}"

- name: Copy sql creation scripts
  copy:
    src: "{{ item }}"
    dest: "{{ldsm_db_setup_dir}}/{{ item | basename }}"
  with_fileglob:
   - "{{ ldsm_db_setup_scripts_dir }}/sql/*"
  delegate_to: "{{ groups['control'][0] }}"
  when: not in_vagrant

- name: Copy sql creation scripts (Vagrant)
  copy:
    src: "{{ item }}"
    dest: "{{ldsm_db_setup_dir}}/{{ item | basename }}"
  with_fileglob:
   - "{{ ldsm_db_setup_scripts_dir }}/sql/*"
  when: in_vagrant

# TODO: this task does not fail on error when using Ansible 2.1.1.0
- name: Run Flyway migration
  docker_container:
    name: migrate_ldsm
    image: "lren/flyway:{{ flyway_version }}"
    command: migrate
    detach: no
    network_mode: host
    interactive: yes
    # cleanup: yes
    volumes:
      - '{{ ldsm_db_setup_dir }}:/flyway/sql'
    env:
      FLYWAY_DBMS: postgresql
      FLYWAY_HOST: '{{ ldsm_db_host }}'
      FLYWAY_PORT: '{{ ldsm_db_port }}'
      FLYWAY_DATABASE_NAME: '{{ ldsm_db_name }}'
      FLYWAY_SCHEMAS: "public"
      FLYWAY_USER: '{{ ldsm_db_admin_user }}'
      FLYWAY_PASSWORD: '{{ ldsm_db_admin_password }}'
      FLYWAY_DRIVER: 'org.postgresql.Driver'
  delegate_to: "{{ groups['control'][0] }}"
