---

# Mysql user in Docker appears as user 999 outside
- name: Create MRI database storage directory
  file: state=directory path={{ item }} mode=0700 owner={{ mri_db_docker_user }} group={{ mri_db_docker_user }}
  with_items:
    - '{{ mri_db_data_dir }}'
    - '{{ mri_db_docker_entrypoint_dir }}'

- name: Copy sql creation scripts
  copy:
    src: "{{ item.src }}"
    dest: "{{ mri_db_docker_entrypoint_dir }}/{{ item.dest }}"
  with_items:
   - src: "mridb/sql/access.sql"
     dest: "access.sql"

- name: Wait for Marathon
  include: ../../marathon-app/tasks/wait-for-marathon.yml
  vars:
    uri: "{{ internal_marathon_url }}"
  tags:
    - launch

- name: Remove old MRI database using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ mri_db_marathon_id }}"
    state: "absent"
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  tags:
    - launch

- name: Launch MRI database using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ mri_db_marathon_id }}"
    state: "present"
    docker_image: "{{ mri_db_image }}:{{ mri_db_version }}"
    docker_force_pull_image: true
    docker_network: BRIDGE
    docker_port_mappings:
      - hostPort: '{{ mri_db_port }}'
        containerPort: 3306
        name: 'mysql'
        protocol: 'tcp'
    container_volumes:
      - containerPath: "/var/lib/mysql"
        hostPath: "{{ mri_db_data_dir }}"
        mode: RW
      - containerPath: "/docker-entrypoint-initdb.d"
        hostPath: "{{ mri_db_docker_entrypoint_dir }}"
        mode: RO
    env:
      MYSQL_DATABASE: "mri"
      MYSQL_USER: "{{ mri_db_user }}"
      MYSQL_PASSWORD: "{{ mri_db_password }}"
      MYSQL_ROOT_PASSWORD: "{{ mri_db_root_password }}"
    labels:
      MARATHON_SINGLE_INSTANCE_APP: "true"
    instances: 1
    cpus: '{{ mri_db_cpus }}'
    mem: '{{ mri_db_mem }}'
    ports: [] # defined in docker_port_mappings
    require_ports: true
    constraints: [["hostname", "CLUSTER", "{{ mri_db_marathon_host }}"]]
    dependencies: []
    executor: ""
    health_checks:
      - protocol: COMMAND
        command:
          value: "/usr/bin/mysql --host=localhost --port=3306 --user={{ mri_db_user }} --password={{ mri_db_password }} -e 'show databases;' | grep information_schema"
        gracePeriodSeconds: 300
        intervalSeconds: 20
        timeoutSeconds: 10
        maxConsecutiveFailures: 5
    upgrade_strategy_minimum_health_capacity: 0.0
    upgrade_strategy_maximum_over_capacity: 0.0
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  tags:
    - launch

- name: Create group for Airflow
  group:
    name: '{{ airflow_group }}'
    state: present

- name: Create user for Airflow
  user:
    name: '{{ airflow_user }}'
    group: '{{ airflow_group }}'
    home: '{{ airflow_home }}'

- name: Create airflow home
  file:
    path: '{{ airflow_home}}'
    state: directory
    owner: '{{ airflow_user }}'

- name: Setup configuration for alembic database upgrade
  template:
    src: alembic.ini.j2
    dest: '{{ mri_meta_extract_dir }}/data/db/alembic.ini'
    owner: '{{ airflow_user }}'

- name: Install pip
  apt:
    name: 'python-pip'
    state: present

- name: Install required Python packages
  pip:
    name: '{{ item }}'
    state: present
  with_items:
    - "SQLAlchemy==1.0.13"
    - "PyMySQL==0.7.3"
    - "pydicom==0.9.9"
    - "alembic==0.8.6"

- name: Launch Alembic to upgrade the MRI database
  command: alembic upgrade head
  args:
    chdir: '{{ mri_meta_extract_dir }}/data/db'
