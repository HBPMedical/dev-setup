---

# Default user/group in Docker appears as user 999 outside, woken user has an id of 1000
- name: Create woken configuration directory
  file: state=directory path={{ woken_config_dir }} mode=0700 owner=1000 group=999
  become: True

- name: Setup configuration for the woken application
  template: src=application.conf.j2 dest={{ woken_config_dir }}/application.conf mode=0700 owner=1000 group=999
  become: True

- name: Wait for Marathon
  include: ../../marathon-app/tasks/wait-for-marathon.yml
  vars:
    uri: "{{ internal_marathon_url }}"

- name: Delete old woken app using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ woken_marathon_id }}"
    state: "absent"
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"

- name: Launch woken using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ woken_marathon_id }}"
    state: "present"
    docker_image: "{{ woken_docker_image }}"
    docker_force_pull_image: true
    docker_network: BRIDGE
    docker_port_mappings:
      - hostPort: "{{ woken_http_port }}"
        containerPort: 8087
        protocol: 'tcp'
        name: 'http'
      - hostPort: "{{ woken_akka_port }}"
        containerPort: "{{ woken_akka_port }}"
        protocol: 'tcp'
        name: 'akka'
      - hostPort: "{{ woken_prometheus_exporter_port }}"
        containerPort: 9090
        protocol: 'tcp'
        name: 'prometheus-exporter'
    docker_parameters: '{{ woken_docker_parameters }}'
    container_volumes:
      - containerPath: "/opt/woken/config"
        hostPath: "{{ woken_config_dir }}"
        mode: RW
    env: '{{ woken_env }}'
    instances: 1
    cpus: '{{ woken_cpus }}'
    mem: '{{ woken_mem }}'
    ports: []
    require_ports: true
    constraints: '{{ woken_marathon_constraints }}'
    dependencies: '{{ woken_dependencies }}'
    executor: ""
    wait_timeout: 600
    health_checks:
      - protocol: "{% if marathon_version | version_compare('1.4', '>=') %}MESOS_HTTP{% else %}HTTP{% endif %}"
        portName: 'http'
        path: "/health"
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
    readinessChecks:
      - protocol: "HTTP"
        path: "/readiness"
        intervalSeconds: 30
        portName: "http"
        timeoutSeconds: 20
    upgrade_strategy_minimum_health_capacity: 0.0
    upgrade_strategy_maximum_over_capacity: 0.0
  async: 600
  poll: 1
