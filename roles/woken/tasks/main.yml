---

# Default user in Docker appears as user 999 outside
- name: Create directory
  file: state=directory path={{ woken_config_dir }} mode=0700 owner=999 group=999
  become: True

- name: Setup configuration for the woken application
  template: src=application.conf.j2 dest={{ woken_config_dir }}/application.conf mode=0700 owner=999 group=999
  become: True

- name: Wait for Marathon
  include: ../../marathon-app/tasks/wait-for-marathon.yml
  vars:
    uri: "{{ internal_marathon_url }}"

- name: Delete old woken app using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ woken_marathon_id }}"
    state: "absent"
    waitTimeout: 600
  async: 600
  poll: 1

# Host networking is required on Federation to be able to use Denodo JDBC over RMI driver
- name: Launch woken app using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ woken_marathon_id }}"
    state: "present"
    docker_image: "{{ woken_docker_image }}"
    docker_force_pull_image: true
    docker_network: HOST
    container_volumes:
      - containerPath: "/opt/woken/config"
        hostPath: "{{ woken_config_dir }}"
        mode: RW
    instances: 1
    cpus: 0.5
    mem: 512
    ports: []
    require_ports: false
    constraints: [["hostname", "CLUSTER", "{{ woken_marathon_host }}"]]
    dependencies: []
    executor: ""
    wait_timeout: 600
    health_checks:
      - protocol: HTTP
        port: "{{ woken_port }}"
        path: "/"
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
  async: 600
  poll: 1
  when: woken_docker_network == 'HOST'

- name: Launch woken using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ woken_marathon_id }}"
    state: "present"
    docker_image: "{{ woken_docker_image }}"
    docker_force_pull_image: true
    docker_network: BRIDGE
    docker_port_mappings:
      - hostPort: "{{ woken_port }}"
        containerPort: 8087
    container_volumes:
      - containerPath: "/opt/woken/config"
        hostPath: "{{ woken_config_dir }}"
        mode: RW
    instances: 1
    cpus: 0.5
    mem: 512
    ports: []
    require_ports: false
    constraints: [["hostname", "CLUSTER", "{{ woken_marathon_host }}"]]
    dependencies: []
    executor: ""
    wait_timeout: 600
    health_checks:
      - protocol: HTTP
        port: "{{ woken_port }}"
        path: "/"
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
  async: 600
  poll: 1
  when: woken_docker_network == 'BRIDGE'

#      healthChecks:
#        - protocol: COMMAND
#          command:
#            value: "docker exec $(for i in $(docker ps -q --no-trunc); do docker inspect $i | grep -sq 'MESOS_TASK_ID=${MESOS_TASK_ID:?}' && echo $i; done) pg_isready"
#            # TODO: Let's hope that there will be support for in-docker commands soon. See this thread: https://groups.google.com/forum/#!topic/marathon-framework/S_k6k3ydQ-o
#          gracePeriodSeconds: 60
#          maxConsecutiveFailures: 5
#          intervalSeconds: 20
#          timeoutSeconds: 10
