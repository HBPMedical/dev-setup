akka {
  log-dead-letters = 1
  log-dead-letters-during-shutdown = off
  loglevel = INFO

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      fsm = on
    }
  }
  remote {
    maximum-payload-bytes = 10000000 bytes
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = {{ woken_host }} # external (logical) hostname
      port = {{ woken_akka_port }} # external (logical) port

{% if woken_docker_network == 'BRIDGE' %}
      # With bridge networking, bind to localhost, then let Docker do the NAT translation
      bind-hostname = localhost     # internal (bind) hostname
      bind-port = 8088              # internal (bind) port
{% else %}
      bind-hostname = "0.0.0.0"
      # Network interface will be bound to the woken_akka_port port,
      # and remoting protocol will expect messages sent to the bound port
      bind-port = ""
{% endif %}

      message-frame-size =  10000000b
      send-buffer-size =  10000000b
      receive-buffer-size =  10000000b
      maximum-frame-size = 10000000b
    }
  }
  cluster {

    seed-nodes = [
{% if woken_docker_network == 'BRIDGE' %}
      # With bridge networking, bind to localhost, then let Docker do the NAT translation
      "akka.tcp://woken@localhost:8088"
{% else %}
      "akka.tcp://woken@{{ woken_host }}:{{ woken_akka_port }}"
{% endif %}
    ]

    roles = ["woken"]
  }
}

spray.can.server {
  idle-timeout = 300s
  request-timeout = 180s
}

app {
  systemName = "woken"
  jobServiceName = "job-service"
  interface = "0.0.0.0"
  port = {{ woken_http_port }}
}

jobs {
  node = "{{ inventory_hostname }}"
  owner = "admin@mip.chuv.ch"
  chronosServerUrl = "{{ internal_chronos_url }}"
{% if woken_role == 'mip_federation' %}
  federationDb = "federation"
  nodes = {
{% for node in woken_nodes %}
    {{ node.name }} {
      jobsUrl = "{{ node.url}}"
    }
{% endfor %}
  }
{% else %}
  ldsmDb = "ldsm"
{% endif %}
  resultDb = "woken"
  metaDb = "metadata"
}

db {
  woken {
    jdbc_driver="{{ woken_result_db_jdbc_driver }}"
    jdbc_jar_path="{{ woken_result_db_jdbc_jar }}"
    jdbc_url="{{ woken_result_db_jdbc_url }}"
    jdbc_user="{{ woken_result_db_user }}"
    jdbc_password="{{ woken_result_db_password }}"
  }
  metadata {
    jdbc_driver="{{ woken_metadata_db_jdbc_driver }}"
    jdbc_jar_path="{{ woken_metadata_db_jdbc_jar }}"
    jdbc_url="{{ woken_metadata_db_jdbc_url }}"
    jdbc_user="{{ woken_metadata_db_user }}"
    jdbc_password="{{ woken_metadata_db_password }}"
  }

{% if woken_role == 'mip_federation' %}
  federation {
    jdbc_driver="{{ federation_db_jdbc_driver }}"
    jdbc_jar_path="{{ federation_db_jdbc_jar }}"
    jdbc_url="{{ federation_db_jdbc_url }}"
    jdbc_user="{{ federation_db_user }}"
    jdbc_password="{{ federation_db_password }}"
  }
{% else %}
  ldsm {
    jdbc_driver="{{ woken_data_db_jdbc_driver }}"
    jdbc_jar_path="{{ woken_data_db_jdbc_jar }}"
    jdbc_url="{{ woken_data_db_jdbc_url }}"
    jdbc_user="{{ woken_data_db_user }}"
    jdbc_password="{{ woken_data_db_password }}"
  }
{% endif %}
}

defaultSettings {
  # Default settings for the request service
  request {
    nodes = {}
{% if woken_role == 'mip_federation' %}
    inDb = "federationDb"
{% else %}
    inDb = "ldsm"
{% endif %}
    outDb = "woken"
    metaDb = "metadata"
    mainTable = "{{ woken_main_table }}"

    functions {
{% for fn in woken_functions %}
      {{ fn.name }} = {
        image = "{{ fn.docker_image }}"
        predictive = {{ fn.predictive | lower }}
      }
{% endfor %}
    }
  }
}
