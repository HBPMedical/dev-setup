---

# Version of the Docker image for woken to use
woken_version: latest

# Id of woken in Marathon
woken_marathon_id: /algorithm-factory/woken

# Location of the configuration directory
woken_config_dir: /srv/docker/woken/config

# Port to use to expose woken to other services in the cluster.
# Ignored if woken_docker_network == HOST, in this case woken can be reached under port 8087
# Default to 8087 when using host networking, 31087 otherwise
woken_http_port: "{% if woken_docker_network == 'BRIDGE' %}31087{% else %}8087{% endif %}"
# Port used by Akka cluster
woken_akka_port: "{% if woken_docker_network == 'BRIDGE' %}31088{% else %}8088{% endif %}"
# Amount of CPU reserved for woken
woken_cpus: 0.5
# Amount of memory in mb reserved for woken
woken_mem: 1024.0
# Networking mode for the Docker container running woken. Values are BRIDGE or HOST.
# Use HOST to connect woken to Denodo on the Federation servers, otherwise prefer BRIDGE
woken_docker_network: BRIDGE
# Additional parameters for Docker
woken_docker_parameters: []
woken_docker_image_basename: hbpmip/woken
woken_docker_image: "{{ woken_docker_image_basename }}:{{ woken_version }}"

# Attach the woken application to a particular host. The hostname should be the name known by Marathon / Mesos
woken_marathon_host: "{{ ansible_fqdn }}"
# Set of constraints to use to place woken on some particular host(s)
woken_marathon_constraints: [["hostname", "CLUSTER", "{{ woken_marathon_host }}"]]

# How woken connects to the woken database storing its results
woken_db_port: 31432
woken_db_host: localhost
woken_db_user: postgres
woken_db_password: postgres
woken_db_name: woken
woken_db_jdbc_url: "jdbc:postgresql://{{ woken_db_host }}:{{ woken_db_port }}/{{ woken_db_name }}"
woken_db_jdbc_driver: "org.postgresql.Driver"
woken_db_jdbc_jar: "/usr/lib/R/libraries/postgresql-9.4-1201.jdbc41.jar"
woken_db_marathon_id: /algorithm-factory/wokendb

woken_result_db_port: '{{ woken_db_port }}'
woken_result_db_host: '{{ woken_db_host }}'
woken_result_db_user: '{{ woken_db_user }}'
woken_result_db_password: '{{ woken_db_password }}'
woken_result_db_jdbc_url: '{{ woken_db_jdbc_url }}'
woken_result_db_jdbc_driver: '{{ woken_db_jdbc_driver }}'
woken_result_db_jdbc_jar: '{{ woken_db_jdbc_jar }}'

# How woken connects to the LDSM database containing the data to process
woken_data_db_port: '{{ ldsm_db_port }}'
woken_data_db_host: '{{ ldsm_db_host }}'
woken_data_db_user: '{{ ldsm_db_user }}'
woken_data_db_password: '{{ ldsm_db_password }}'
woken_data_db_jdbc_url: '{{ ldsm_db_jdbc_url }}'
woken_data_db_jdbc_driver: '{{ ldsm_db_jdbc_driver }}'
woken_data_db_jdbc_jar: '{{ ldsm_db_jdbc_jar }}'

woken_metadata_db_port: '{{ meta_db_port }}'
woken_metadata_db_host: '{{ meta_db_host }}'
woken_metadata_db_user: '{{ meta_db_user }}'
woken_metadata_db_password: '{{ meta_db_password }}'
woken_metadata_db_jdbc_url: '{{ meta_db_jdbc_url }}'
woken_metadata_db_jdbc_driver: '{{ meta_db_jdbc_driver }}'
woken_metadata_db_jdbc_jar: '{{ meta_db_jdbc_jar }}'

# URL to Chronos internal to the current cluster. You need to ensure that the woken application can reach that URL.
internal_chronos_url: http://default:4400
chronos_marathon_id: /algorithm-factory/chronos

# URL to Marathon master internal to the current cluster. You need to ensure that Ansible can reach that URL.
internal_marathon_url: "http://{{ marathon_hostname }}:{{ marathon_port }}"

woken_dependencies:
  - '{{ chronos_marathon_id }}'
  - '{{ woken_db_marathon_id }}'

# Roles are mip_node or mip_federation
woken_role: mip_node

# list of name, url values. Used to connect to woken workers when woken_role == mip_federation
woken_nodes: []

woken_main_table: adni_merge
woken_functions:
  - name: histograms
    docker_image: "hbpmip/python-histograms:latest"
    predictive: false
  - name: statisticsSummary
    docker_image: "hbpmip/r-summary-stats:latest"
    predictive: false
  - name: linearRegression
    docker_image: "hbpmip/r-linear-regression:latest"
    predictive: false
  - name: anova
    docker_image: "hbpmip/r-linear-regression:latest"
    predictive: false
  - name: knn
    docker_image: "hbpmip/java-rapidminer-knn:latest"
    predictive: true
  - name: naiveBayes
    docker_image: "hbpmip/java-rapidminer-naivebayes:latest"
    predictive: true
