---

- name: Wait for Marathon
  include: ../../marathon-app/tasks/wait-for-marathon.yml
  vars:
    uri: "{{ internal_marathon_url }}"

- name: Delete old Chronos app using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ chronos_marathon_id }}"
    state: "absent"
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"

- name: Launch Chronos using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ chronos_marathon_id }}"
    state: "present"
    docker_image: "{{ chronos_docker_image }}"
    docker_force_pull_image: true
    docker_network: BRIDGE
    docker_port_mappings:
      - hostPort: "{{ chronos_port }}"
        containerPort: 4400
    docker_parameters: '{{ chronos_docker_parameters }}'
    container_volumes: []
    env:
      CHRONOS_HTTP_PORT: 4400
      CHRONOS_MASTER: "{{ chronos_zk_mesos_master }}"
      CHRONOS_ZK_HOSTS: "{{ chronos_zk_hosts }}"
      CHRONOS_WEBUI_URL: "http://{{ chronos_marathon_host }}:{{ chronos_port }}/"
      CHRONOS_HOSTNAME: "{{ chronos_marathon_host }}"
      CHRONOS_FAILURE_RETRY: "{{ chronos_failure_retry }}"
      CHRONOS_DISABLE_AFTER_FAILURES: "{{ chronos_disable_after_failures }}"
      CHRONOS_CLUSTER_NAME: "{{ chronos_cluster_name }}"
    instances: 1
    cpus: '{{ chronos_cpus }}'
    mem: '{{ chronos_mem }}'
    ports: []
    require_ports: false
    constraints: [["hostname", "CLUSTER", "{{ chronos_marathon_host }}"]]
    dependencies: []
    executor: ""
    wait_timeout: 600
    health_checks:
      - protocol: HTTP
        port: "{{ chronos_port }}"
        path: "/"
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
