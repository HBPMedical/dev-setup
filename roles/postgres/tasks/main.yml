---

# Postgres user in Docker appears as user 999 outside
- name: Create Postgres storage directory
  file: state=directory path={{ postgres_data_dir }} mode=0700 owner={{ postgres_docker_user }} group={{ postgres_docker_user }}

#- name: Collect the uid of the user
#  command: id -u {{ postgres_docker_user }}
#  register: postgres_docker_user_uid

- name: Wait for Marathon
  include: ../../marathon-app/tasks/wait-for-marathon.yml
  vars:
    uri: "{{ internal_marathon_url }}"

- name: Remove old Postgres using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ postgres_marathon_id }}"
    state: "absent"
    waitTimeout: 600
  async: 600
  poll: 1

- name: Launch Postgres using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ postgres_marathon_id }}"
    state: "present"
    docker_image: "postgres:{{ postgres_version }}"
    docker_forcePullImage: true
    docker_network: BRIDGE
    docker_portMappings:
      - hostPort: 31432
        containerPort: 5432
    container_volumes:
      - containerPath: "/var/lib/postgresql/data"
        hostPath: "{{ postgres_data_dir }}"
        mode: RW
    env:
      POSTGRES_USER: "{{ postgres_user }}"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
    instances: 1
    cpus: 0.2
    mem: 128
    ports: []
    requirePorts: false
    constraints: [["hostname", "CLUSTER", "{{ postgres_marathon_host }}"]]
    dependencies: []
    executor: ""
    waitTimeout: 600
    healthChecks:
      - protocol: COMMAND
        command:
          value: "/usr/lib/postgresql/9.4/bin/pg_isready"
        gracePeriodSeconds: 300
        intervalSeconds: 20
        timeoutSeconds: 10
        maxConsecutiveFailures: 5
  async: 600
  poll: 1

#    docker_parameters:
#      - { key: "user", value: "{{ postgres_docker_user_uid.stdout }}" }

