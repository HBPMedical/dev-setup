---

- name: Create user for Denodo
  user: name={{ denodo_user }} group={{ denodo_group }} uid={{ denodo_user_id }}

- name: Create directory
  file: state=directory path={{ denodo_dir }} mode=0770 owner={{ denodo_user }} group={{ denodo_group }}
  become: True

# Read java_home from local Ansible facts
- name: Re-read local facts
  setup:
    filter=ansible_local
  when: java_home is not defined

- name: Set JAVA_HOME ansible fact
  set_fact:
    java_home={{ ansible_local.java.general.java_home }}
  when: java_home is not defined

- name: Wait for Marathon
  include: ../../marathon-app/tasks/wait-for-marathon.yml
  vars:
    uri: "{{ internal_marathon_url }}"

- name: Remove old Denodo using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ denodo_marathon_id }}"
    state: "absent"
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  run_once: true

- name: Launch Denodo using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ denodo_marathon_id }}"
    state: "present"
    cmd: "cd {{ denodo_dir }}/bin; {{ denodo_cmd }}"
    env:
      JAVA_HOME: "{{ denodo_jre }}"
      JAVA_BIN: "{{ denodo_jre }}/bin/java"
      VDB_CONFIGURATION_FILE: "{{ denodo_vdb_configuration_file }}"
      DENODO_LAUNCHER_CLASSPATH: "{{ denodo_launcher_classpath }}"
      LD_LIBRARY_PATH: "{{ denodo_ld_library_path }}"
    instances: 1
    cpus: "{{ denodo_cpus }}"
    mem: "{{ denodo_memory_heap + denodo_memory_perm + 1024 }}"
    ports: []
    require_ports: false
    constraints: [["hostname", "CLUSTER", "{{ denodo_marathon_host | trim }}"]]
    dependencies: []
    executor: ""
    user: "{{ denodo_user }}"
    wait_timeout: 600
    health_checks:
      - protocol: TCP
        port: 9090
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
      - protocol: TCP
        port: 9999
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  run_once: true
